!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.AcroML=t():e.AcroML=t()}(this,(()=>(()=>{"use strict";var e={d:(t,o)=>{for(var r in o)e.o(o,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:o[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{TreeGridDD:()=>r,default:()=>n});const o=acroml_require("acroml-core").DD;class r extends o{constructor(){super(),this.content=""}buildingDD(){let e=JSON.parse(this.content),t=this;!function o(r){for(let n=0;n<r.length;n++){let l=r[n];for(let o=0;o<e.displayValueColumns.length;o++){let r=e.displayValueColumns[o],n=r.lng.LCID;for(let e=0;e<r.SeqNos.length;e++){let o=r.SeqNos[e],i=l[n+"-"+o];if(!i)continue;let s=l.DDKey;t.addDisplayValue(s,n,o,i)}}l.children&&o(l.children)}}(e.rows),super.buildingDD()}}const n=r;return o.registerDD(".treegrid.json","utf8",[],r),t})()));