(()=>{var e={d:(t,o)=>{for(var r in o)e.o(o,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:o[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};(()=>{"use strict";e.r(t),e.d(t,{TreeGridDD:()=>r,default:()=>l});const o=AcroML.DD;class r extends o{constructor(){super(),this.content=""}buildingDD(){let e=JSON.parse(this.content),t=this;!function o(r){for(let l=0;l<r.length;l++){let n=r[l];for(let o=0;o<e.displayValueColumns.length;o++){let r=e.displayValueColumns[o],l=r.lng.LCID;for(let e=0;e<r.SeqNos.length;e++){let o=r.SeqNos[e],i=n[l+"-"+o];if(!i)continue;let s=n.DDKey;t.addDisplayValue(s,l,o,i)}}n.children&&o(n.children)}}(e.rows),super.buildingDD()}}const l=r;o.registerDD(".treegrid.json","utf8",[],r)})();var o=AcroML="undefined"==typeof AcroML?{}:AcroML;for(var r in t)o[r]=t[r];t.__esModule&&Object.defineProperty(o,"__esModule",{value:!0})})();