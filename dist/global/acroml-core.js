/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["AcroML"] = factory();
	else
		root["AcroML"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../src/acroML.Culture.mjs":
/*!*********************************!*\
  !*** ../src/acroML.Culture.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   culture: () => (/* binding */ acroMLCulture),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nlet g_cultures=[];\r\nlet g_cultures_byLCID = {};\r\nlet g_cultures_byTag = {};\r\nfunction registerLCID(LCID,\r\n    LanguageName_Abbreviate,\r\n    LanguageName_English,\r\n    LanguageName_Chinese,\r\n    LanguageName_Native,\r\n    RegionID,\r\n    RegionName_Abbreviate,\r\n    RegionName_English,\r\n    RegionName_Chinese,\r\n    RegionName_Native,\r\n    CodePage_ANSI,\r\n    CodePage_OEM,\r\n    CodePage_MAC,\r\n    Google_Abbreviate,\r\n    BaiDu_Abbreviate,\r\n    Tag)\r\n{\r\n    let keyLCID = LCID.toString();\r\n    if (g_cultures_byLCID[keyLCID])\r\n        throw \"LCID:\" + LCID + \" already registered!\";\r\n    let culture = {\r\n        LCID,\r\n        LanguageName_Abbreviate,\r\n        LanguageName_English,\r\n        LanguageName_Chinese,\r\n        LanguageName_Native,\r\n        RegionID,\r\n        RegionName_Abbreviate,\r\n        RegionName_English,\r\n        RegionName_Chinese,\r\n        RegionName_Native,\r\n        CodePage_ANSI,\r\n        CodePage_OEM,\r\n        CodePage_MAC,\r\n        Google_Abbreviate,\r\n        BaiDu_Abbreviate,\r\n        Tag\r\n    }\r\n    g_cultures.push(culture);\r\n    g_cultures_byLCID[keyLCID] = culture;\r\n\r\n    if (g_cultures_byTag[Tag])\r\n        throw \"Tag:\" + Tag + \" already registered!\";\r\n    g_cultures_byTag[Tag] = culture;\r\n}\r\n\r\nfunction init(){\r\n    registerLCID(1025,\"ARA\",\"Arabic\",\"阿拉伯语(沙特阿拉伯)\",\"العربية\",966,\"SAU\",\"Saudi Arabia\",\"沙特阿拉伯\",\"المملكة العربية السعودية\",1256,720,10004,\"ar\",null,\"ar-SA\");\r\n    registerLCID(1026,\"BGR\",\"Bulgarian\",\"保加利亚语(保加利亚)\",\"български\",359,\"BGR\",\"Bulgaria\",\"保加利亚\",\"България\",1251,866,10007,\"bg\",\"bul\",\"bg-BG\");\r\n    registerLCID(1027,\"CAT\",\"Catalan\",\"加泰罗尼亚语(加泰罗尼亚)\",\"català\",34,\"ESP\",\"Spain\",\"西班牙\",\"Espanya\",1252,850,10000,\"ca\",null,\"ca-ES\");\r\n    registerLCID(1028,\"CHT\",\"Chinese (Traditional)\",\"中文(繁体，中国台湾)\",\"中文(繁體)\",886,\"TWN\",\"Taiwan,China\",\"中国台湾\",\"中國台灣\",950,950,10002,\"zh-tw\",\"cht\",\"zh-TW\");\r\n    registerLCID(1029,\"CSY\",\"Czech\",\"捷克语(捷克共和国)\",\"čeština\",420,\"CZE\",\"Czech Republic\",\"捷克共和国\",\"Česká republika\",1250,852,10029,\"cs\",\"cs\",\"cs-CZ\");\r\n    registerLCID(1030,\"DAN\",\"Danish\",\"丹麦语(丹麦)\",\"dansk\",45,\"DNK\",\"Denmark\",\"丹麦\",\"Danmark\",1252,850,10000,\"da\",\"dan\",\"da-DK\");\r\n    registerLCID(1031,\"DEU\",\"German\",\"德语(德国)\",\"Deutsch\",49,\"DEU\",\"Germany\",\"德国\",\"Deutschland\",1252,850,10000,\"de\",\"de\",\"de-DE\");\r\n    registerLCID(1032,\"ELL\",\"Greek\",\"希腊语(希腊)\",\"Ελληνικά\",30,\"GRC\",\"Greece\",\"希腊\",\"Ελλάδα\",1253,737,10006,\"el\",\"el\",\"el-GR\");\r\n    registerLCID(1033,\"ENU\",\"English\",\"英语(美国)\",\"English\",1,\"USA\",\"United States\",\"美国\",\"United States\",1252,437,10000,\"en\",\"en\",\"en-US\");\r\n    registerLCID(1034,\"ESP\",\"Spanish\",\"西班牙语(西班牙，传统排序)\",\"español\",34,\"ESP\",\"Spain\",\"西班牙\",\"España\",1252,850,10000,\"es\",null,\"es-ES_tradnl\");\r\n    registerLCID(1035,\"FIN\",\"Finnish\",\"芬兰语(芬兰)\",\"suomi\",358,\"FIN\",\"Finland\",\"芬兰\",\"Suomi\",1252,850,10000,\"fi\",\"fin\",\"fi-FI\");\r\n    registerLCID(1036,\"FRA\",\"French\",\"法语(法国)\",\"français\",33,\"FRA\",\"France\",\"法国\",\"France\",1252,850,10000,\"fr\",\"fra\",\"fr-FR\");\r\n    registerLCID(1037,\"HEB\",\"Hebrew\",\"希伯来语(以色列)\",\"עברית\",972,\"ISR\",\"Israel\",\"以色列\",\"ישראל\",1255,862,10005,\"iw\",null,\"he-IL\");\r\n    registerLCID(1038,\"HUN\",\"Hungarian\",\"匈牙利语(匈牙利)\",\"magyar\",36,\"HUN\",\"Hungary\",\"匈牙利\",\"Magyarország\",1250,852,10029,\"hu\",\"hu\",\"hu-HU\");\r\n    registerLCID(1039,\"ISL\",\"Icelandic\",\"冰岛语(冰岛)\",\"íslenska\",354,\"ISL\",\"Iceland\",\"冰岛\",\"Ísland\",1252,850,10079,\"is\",null,\"is-IS\");\r\n    registerLCID(1040,\"ITA\",\"Italian\",\"意大利语(意大利)\",\"italiano\",39,\"ITA\",\"Italy\",\"意大利\",\"Italia\",1252,850,10000,\"it\",\"it\",\"it-IT\");\r\n    registerLCID(1041,\"JPN\",\"Japanese\",\"日语(日本)\",\"日本語\",81,\"JPN\",\"Japan\",\"日本\",\"日本\",932,932,10001,\"ja\",\"jp\",\"ja-JP\");\r\n    registerLCID(1042,\"KOR\",\"Korean\",\"朝鲜语(韩国)\",\"한국어\",82,\"KOR\",\"Korea\",\"韩国\",\"대한민국\",949,949,10003,\"ko\",\"kor\",\"ko-KR\");\r\n    registerLCID(1043,\"NLD\",\"Dutch\",\"荷兰语(荷兰)\",\"Nederlands\",31,\"NLD\",\"Netherlands\",\"荷兰\",\"Nederland\",1252,850,10000,\"nl\",\"nl\",\"nl-NL\");\r\n    registerLCID(1044,\"NOR\",\"Norwegian (Bokmål)\",\"书面挪威语(挪威)\",\"norsk (bokmål)\",47,\"NOR\",\"Norway\",\"挪威\",\"Norge\",1252,850,10000,\"no\",null,\"nb-NO\");\r\n    registerLCID(1045,\"PLK\",\"Polish\",\"波兰语(波兰)\",\"polski\",48,\"POL\",\"Poland\",\"波兰\",\"Polska\",1250,852,10029,\"pl\",\"pl\",\"pl-PL\");\r\n    registerLCID(1046,\"PTB\",\"Portuguese\",\"葡萄牙语(巴西)\",\"Português\",55,\"BRA\",\"Brazil\",\"巴西\",\"Brasil\",1252,850,10000,\"pt\",\"pt\",\"pt-BR\");\r\n    registerLCID(1047,\"RMC\",\"Romansh\",\"罗曼什语(瑞士)\",\"Rumantsch\",41,\"CHE\",\"Switzerland\",\"瑞士\",\"Svizra\",1252,850,10000,\"\",null,\"rm-CH\");\r\n    registerLCID(1048,\"ROM\",\"Romanian\",\"罗马尼亚语(罗马尼亚)\",\"română\",40,\"ROM\",\"Romania\",\"罗马尼亚\",\"România\",1250,852,10029,\"ro\",\"rom\",\"ro-RO\");\r\n    registerLCID(1049,\"RUS\",\"Russian\",\"俄语(俄罗斯)\",\"русский\",7,\"RUS\",\"Russia\",\"俄罗斯\",\"Россия\",1251,866,10007,\"ru\",\"ru\",\"ru-RU\");\r\n    registerLCID(1050,\"HRV\",\"Croatian\",\"克罗地亚语(克罗地亚)\",\"hrvatski\",385,\"HRV\",\"Croatia\",\"克罗地亚\",\"Hrvatska\",1250,852,10082,\"hr\",null,\"hr-HR\");\r\n    registerLCID(1051,\"SKY\",\"Slovak\",\"斯洛伐克语(斯洛伐克)\",\"slovenčina\",421,\"SVK\",\"Slovakia\",\"斯洛伐克\",\"Slovenská republika\",1250,852,10029,\"sk\",null,\"sk-SK\");\r\n    registerLCID(1052,\"SQI\",\"Albanian\",\"阿尔巴尼亚语(阿尔巴尼亚)\",\"shqipe\",355,\"ALB\",\"Albania\",\"阿尔巴尼亚\",\"Shqipëria\",1250,852,10029,\"sq\",null,\"sq-AL\");\r\n    registerLCID(1053,\"SVE\",\"Swedish\",\"瑞典语(瑞典)\",\"svenska\",46,\"SWE\",\"Sweden\",\"瑞典\",\"Sverige\",1252,850,10000,\"sv\",null,\"sv-SE\");\r\n    registerLCID(1054,\"THA\",\"Thai\",\"泰语(泰国)\",\"ไทย\",66,\"THA\",\"Thailand\",\"泰国\",\"ไทย\",874,874,10021,\"th\",\"th\",\"th-TH\");\r\n    registerLCID(1055,\"TRK\",\"Turkish\",\"土耳其语(土耳其)\",\"Türkçe\",90,\"TUR\",\"Turkey\",\"土耳其\",\"Türkiye\",1254,857,10081,\"tr\",null,\"tr-TR\");\r\n    registerLCID(1056,\"URD\",\"Urdu\",\"乌尔都语(巴基斯坦伊斯兰共和国)\",\"اُردو\",92,\"PAK\",\"Islamic Republic of Pakistan\",\"巴基斯坦伊斯兰共和国\",\"پاکستان\",1256,720,10004,\"\",null,\"ur-PK\");\r\n    registerLCID(1057,\"IND\",\"Indonesian\",\"印度尼西亚语(印度尼西亚)\",\"Bahasa Indonesia\",62,\"IDN\",\"Indonesia\",\"印度尼西亚\",\"Indonesia\",1252,850,10000,\"id\",null,\"id-ID\");\r\n    registerLCID(1058,\"UKR\",\"Ukrainian\",\"乌克兰语(乌克兰)\",\"українська\",380,\"UKR\",\"Ukraine\",\"乌克兰\",\"Україна\",1251,866,10017,\"uk\",null,\"uk-UA\");\r\n    registerLCID(1059,\"BEL\",\"Belarusian\",\"白俄罗斯语(白俄罗斯)\",\"Беларускі\",7,\"BLR\",\"Belarus\",\"白俄罗斯\",\"Беларусь\",1251,866,10007,\"be\",null,\"be-BY\");\r\n    registerLCID(1060,\"SLV\",\"Slovenian\",\"斯洛文尼亚语(斯洛文尼亚)\",\"slovenski\",386,\"SVN\",\"Slovenia\",\"斯洛文尼亚\",\"Slovenija\",1250,852,10029,\"sl\",\"slo\",\"sl-SI\");\r\n    registerLCID(1061,\"ETI\",\"Estonian\",\"爱沙尼亚语(爱沙尼亚)\",\"eesti\",372,\"EST\",\"Estonia\",\"爱沙尼亚\",\"Eesti\",1257,775,10029,\"et\",\"est\",\"et-EE\");\r\n    registerLCID(1062,\"LVI\",\"Latvian\",\"拉脱维亚语(拉脱维亚)\",\"latviešu\",371,\"LVA\",\"Latvia\",\"拉脱维亚\",\"Latvija\",1257,775,10029,\"lv\",null,\"lv-LV\");\r\n    registerLCID(1063,\"LTH\",\"Lithuanian\",\"立陶宛语(立陶宛)\",\"lietuvių\",370,\"LTU\",\"Lithuania\",\"立陶宛\",\"Lietuva\",1257,775,10029,\"lt\",null,\"lt-LT\");\r\n    registerLCID(1064,\"TAJ\",\"Tajik (Cyrillic)\",\"塔吉克语(西里尔文，塔吉克斯坦)\",\"Тоҷикӣ\",992,\"TAJ\",\"Tajikistan\",\"塔吉克斯坦\",\"Тоҷикистон\",1251,866,10007,\"\",null,\"tg-Cyrl-TJ\");\r\n    registerLCID(1065,\"FAR\",\"Persian\",\"波斯语\",\"فارسى\",981,\"IRN\",\"Iran\",\"伊朗\",\"ایران\",1256,720,10004,\"fa\",null,\"fa-IR\");\r\n    registerLCID(1066,\"VIT\",\"Vietnamese\",\"越南语(越南)\",\"Tiếng Việt\",84,\"VNM\",\"Vietnam\",\"越南\",\"Việt Nam\",1258,1258,10000,\"vi\",\"vie\",\"vi-VN\");\r\n    registerLCID(1067,\"HYE\",\"Armenian\",\"亚美尼亚语(亚美尼亚)\",\"Հայերեն\",374,\"ARM\",\"Armenia\",\"亚美尼亚\",\"Հայաստան\",0,1,2,\"\",null,\"hy-AM\");\r\n    registerLCID(1068,\"AZE\",\"Azeri (Latin)\",\"阿塞拜疆语(拉丁语，阿塞拜疆)\",\"Azərbaycan­ılı\",994,\"AZE\",\"Azerbaijan\",\"阿塞拜疆\",\"Azərbaycan\",1254,857,10081,\"\",null,\"az-Latn-AZ\");\r\n    registerLCID(1069,\"EUQ\",\"Basque\",\"巴斯克语(巴斯克)\",\"euskara\",34,\"ESP\",\"Spain\",\"西班牙\",\"Espainia\",1252,850,10000,\"\",null,\"eu-ES\");\r\n    registerLCID(1070,\"HSB\",\"Upper Sorbian\",\"上索布语(德国)\",\"hornjoserbšćina\",49,\"GER\",\"Germany\",\"德国\",\"Němska\",1252,850,10000,\"\",null,\"wen-DE\");\r\n    registerLCID(1071,\"MKI\",\"Macedonian (FYROM)\",\"马其顿语(前南斯拉夫马其顿共和国)\",\"македонски јазик\",389,\"MKD\",\"Macedonia (FYROM)\",\"马其顿(前南斯拉夫马其顿共和国)\",\"Македонија\",1251,866,10007,\"mk\",null,\"mk-MK\");\r\n    registerLCID(1074,\"TSN\",\"Setswana\",\"茨瓦纳语(南非)\",\"Setswana\",27,\"ZAF\",\"South Africa\",\"南非\",\"Aforika Borwa\",1252,850,10000,\"\",null,\"tn-ZA\");\r\n    registerLCID(1076,\"XHO\",\"isiXhosa\",\"索萨语(南非)\",\"isiXhosa\",27,\"ZAF\",\"South Africa\",\"南非\",\"uMzantsi Afrika\",1252,850,10000,\"\",null,\"xh-ZA\");\r\n    registerLCID(1077,\"ZUL\",\"isiZulu\",\"祖鲁语(南非)\",\"isiZulu\",27,\"ZAF\",\"South Africa\",\"南非\",\"iNingizimu Afrika\",1252,850,10000,\"\",null,\"zu-ZA\");\r\n    registerLCID(1078,\"AFK\",\"Afrikaans\",\"南非荷兰语(南非)\",\"Afrikaans\",27,\"ZAF\",\"South Africa\",\"南非\",\"Suid Afrika\",1252,850,10000,\"af\",\"nl\",\"af-ZA\");\r\n    registerLCID(1079,\"KAT\",\"Georgian\",\"格鲁吉亚语(格鲁吉亚)\",\"ქართული\",995,\"GEO\",\"Georgia\",\"格鲁吉亚\",\"საქართველო\",0,1,2,\"\",null,\"ka-GE\");\r\n    registerLCID(1080,\"FOS\",\"Faroese\",\"法罗语(法罗群岛)\",\"føroyskt\",298,\"FRO\",\"Faroe Islands\",\"法罗群岛\",\"Føroyar\",1252,850,10079,\"\",null,\"fo-FO\");\r\n    registerLCID(1081,\"HIN\",\"Hindi\",\"印地语(印度)\",\"हिंदी\",91,\"IND\",\"India\",\"印度\",\"भारत\",0,1,2,\"hi\",null,\"hi-IN\");\r\n    registerLCID(1082,\"MLT\",\"Maltese\",\"马耳他语(马耳他)\",\"Malti\",356,\"MLT\",\"Malta\",\"马耳他\",\"Malta\",0,1,2,\"mt\",null,\"mt-MT\");\r\n    registerLCID(1083,\"SME\",\"Sami (Northern)\",\"北萨米语(挪威)\",\"davvisámegiella\",47,\"NOR\",\"Norway\",\"挪威\",\"Norga\",1252,850,10000,\"\",null,\"se-NO\");\r\n    registerLCID(1086,\"MSL\",\"Malay\",\"马来语(马来西亚)\",\"Bahasa Melayu\",60,\"MYS\",\"Malaysia\",\"马来西亚\",\"Malaysia\",1252,850,10000,\"ms\",null,\"ms-MY\");\r\n    registerLCID(1087,\"KKZ\",\"Kazakh\",\"哈萨克语(哈萨克斯坦)\",\"Қазақ\",7,\"KAZ\",\"Kazakhstan\",\"哈萨克斯坦\",\"Қазақстан\",0,1,2,\"\",null,\"kk-KZ\");\r\n    registerLCID(1088,\"KYR\",\"Kyrgyz\",\"吉尔吉斯语(吉尔吉斯斯坦)\",\"Кыргыз\",996,\"KGZ\",\"Kyrgyzstan\",\"吉尔吉斯斯坦\",\"Кыргызстан\",1251,866,10007,\"\",null,\"ky-KG\");\r\n    registerLCID(1089,\"SWK\",\"Kiswahili\",\"斯瓦希里语(肯尼亚)\",\"Kiswahili\",254,\"KEN\",\"Kenya\",\"肯尼亚\",\"Kenya\",1252,437,10000,\"sw\",null,\"sw-KE\");\r\n    registerLCID(1090,\"TUK\",\"Turkmen\",\"土库曼语(土库曼斯坦)\",\"türkmençe\",993,\"TKM\",\"Turkmenistan\",\"土库曼斯坦\",\"Türkmenistan\",1250,852,10029,\"\",null,\"tk-TM\");\r\n    registerLCID(1091,\"UZB\",\"Uzbek (Latin)\",\"乌兹别克语(拉丁语，乌兹别克斯坦)\",\"U`zbek\",7,\"UZB\",\"Uzbekistan\",\"乌兹别克斯坦\",\"U`zbekiston Respublikasi\",1254,857,10029,\"\",null,\"uz-Latn-UZ\");\r\n    registerLCID(1092,\"TTT\",\"Tatar\",\"鞑靼语(俄罗斯)\",\"Татар\",7,\"RUS\",\"Russia\",\"俄罗斯\",\"Россия\",1251,866,10007,\"\",null,\"tt-RU\");\r\n    registerLCID(1093,\"BNG\",\"Bengali\",\"孟加拉语(印度)\",\"বাংলা\",91,\"IND\",\"India\",\"印度\",\"ভারত\",0,1,2,\"\",null,\"bn-IN\");\r\n    registerLCID(1094,\"PAN\",\"Punjabi\",\"旁遮普语(印度)\",\"ਪੰਜਾਬੀ\",91,\"IND\",\"India\",\"印度\",\"ਭਾਰਤ\",0,1,2,\"\",null,\"pa-IN\");\r\n    registerLCID(1095,\"GUJ\",\"Gujarati\",\"古吉拉特语(印度)\",\"ગુજરાતી\",91,\"IND\",\"India\",\"印度\",\"ભારત\",0,1,2,\"\",null,\"gu-IN\");\r\n    registerLCID(1096,\"ORI\",\"Oriya\",\"奥里雅语(印度)\",\"ଓଡ଼ିଆ\",91,\"IND\",\"India\",\"印度\",\"ଭାରତ\",0,1,2,\"\",null,\"or-IN\");\r\n    registerLCID(1097,\"TAM\",\"Tamil\",\"泰米尔语(印度)\",\"தமிழ்\",91,\"IND\",\"India\",\"印度\",\"இந்தியா\",0,1,2,\"\",null,\"ta-IN\");\r\n    registerLCID(1098,\"TEL\",\"Telugu\",\"泰卢固语(印度)\",\"తెలుగు\",91,\"IND\",\"India\",\"印度\",\"భారత దేశం\",0,1,2,\"\",null,\"te-IN\");\r\n    registerLCID(1099,\"KDI\",\"Kannada\",\"埃纳德语(印度)\",\"ಕನ್ನಡ\",91,\"IND\",\"India\",\"印度\",\"ಭಾರತ\",0,1,2,\"\",null,\"kn-IN\");\r\n    registerLCID(1100,\"MYM\",\"Malayalam\",\"马拉雅拉姆语(印度)\",\"മലയാളം\",91,\"IND\",\"India\",\"印度\",\"ഭാരതം\",0,1,2,\"ms\",null,\"ml-IN\");\r\n    registerLCID(1101,\"ASM\",\"Assamese\",\"阿萨姆语(印度)\",\"অসমীয়া\",91,\"IND\",\"India\",\"印度\",\"ভাৰত\",0,1,2,\"\",null,\"as-IN\");\r\n    registerLCID(1102,\"MAR\",\"Marathi\",\"马拉地语(印度)\",\"मराठी\",91,\"IND\",\"India\",\"印度\",\"भारत\",0,1,2,\"\",null,\"mr-IN\");\r\n    registerLCID(1103,\"SAN\",\"Sanskrit\",\"梵语(印度)\",\"संस्कृत\",91,\"IND\",\"India\",\"印度\",\"भारतम्\",0,1,2,\"\",null,\"sa-IN\");\r\n    registerLCID(1104,\"MNN\",\"Mongolian (Cyrillic)\",\"蒙古语(西里尔文，蒙古)\",\"Монгол хэл\",976,\"MNG\",\"Mongolia\",\"蒙古\",\"Монгол улс\",1251,866,10007,\"\",null,\"mn-MN\");\r\n    registerLCID(1105,\"BOB\",\"Tibetan\",\"藏语(中国)\",\"བོད་ཡིག\",86,\"CHN\",\"People`s Republic of China\",\"中华人民共和国\",\"ཀྲུང་ཧྭ་མི་དམངས་སྤྱི་མཐུན་རྒྱལ་ཁབ།\",0,1,2,\"\",null,\"bo-CN\");\r\n    registerLCID(1106,\"CYM\",\"Welsh\",\"威尔士语(英国)\",\"Cymraeg\",44,\"GBR\",\"United Kingdom\",\"英国\",\"y Deyrnas Unedig\",1252,850,10000,\"cy\",null,\"cy-GB\");\r\n    registerLCID(1107,\"KHM\",\"Khmer\",\"高棉语(柬埔寨)\",\"ខ្មែរ\",855,\"KHM\",\"Cambodia\",\"柬埔寨\",\"កម្ពុជា\",0,1,2,\"\",null,\"km-KH\");\r\n    registerLCID(1108,\"LAO\",\"Lao\",\"老挝语(老挝人民民主共和国)\",\"ລາວ\",457,\"LAO\",\"Lao P.D.R.\",\"老挝人民民主共和国\",\"ສ.ປ.ປ. ລາວ\",0,1,2,\"\",null,\"lo-LA\");\r\n    registerLCID(1110,\"GLC\",\"Galician\",\"加利西亚语(加利西亚语)\",\"galego\",34,\"ESP\",\"Spain\",\"西班牙\",\"España\",1252,850,10000,\"gl\",null,\"gl-ES\");\r\n    registerLCID(1111,\"KNK\",\"Konkani\",\"孔卡尼语(印度)\",\"कोंकणी\",91,\"IND\",\"India\",\"印度\",\"भारत\",0,1,2,\"\",null,\"kok-IN\");\r\n    registerLCID(1114,\"SYR\",\"Syriac\",\"叙利亚语(叙利亚)\",\"ܣܘܪܝܝܐ\",963,\"SYR\",\"Syria\",\"叙利亚\",\"سوريا\",0,1,2,\"\",null,\"syr-SY\");\r\n    registerLCID(1115,\"SIN\",\"Sinhala\",\"僧伽罗语(斯里兰卡)\",\"සිංහ\",94,\"LKA\",\"Sri Lanka\",\"斯里兰卡\",\"ශ්‍රී ලංකා\",0,1,2,\"\",null,\"si-LK\");\r\n    registerLCID(1117,\"IUS\",\"Inuktitut (Syllabics)\",\"因纽特语(音节，加拿大)\",\"ᐃᓄᒃᑎᑐᑦ\",2,\"CAN\",\"Canada\",\"加拿大\",\"ᑲᓇᑕ\",0,1,2,\"\",null,\"iu-Cans-CA\");\r\n    registerLCID(1118,\"AMH\",\"Amharic\",\"阿姆哈拉语(埃塞俄比亚)\",\"አማርኛ\",251,\"ETH\",\"Ethiopia\",\"埃塞俄比亚\",\"ኢትዮጵያ\",0,1,2,\"\",null,\"am-ET\");\r\n    registerLCID(1121,\"NEP\",\"Nepali\",\"尼泊尔语(尼泊尔)\",\"नेपाली\",977,\"NEP\",\"Nepal\",\"尼泊尔\",\"नेपाल\",0,1,2,\"\",null,\"ne-NP\");\r\n    registerLCID(1122,\"FYN\",\"Frisian\",\"弗里西亚语(荷兰)\",\"Frysk\",31,\"NLD\",\"Netherlands\",\"荷兰\",\"Nederlân\",1252,850,10000,\"\",null,\"fy-NL\");\r\n    registerLCID(1123,\"PAS\",\"Pashto\",\"普什图语(阿富汗)\",\"پښتو\",93,\"AFG\",\"Afghanistan\",\"阿富汗\",\"افغانستان\",0,1,2,\"\",null,\"ps-AF\");\r\n    registerLCID(1124,\"FPO\",\"Filipino\",\"菲律宾语(菲律宾)\",\"Filipino\",63,\"PHL\",\"Philippines\",\"菲律宾\",\"Pilipinas\",1252,437,10000,\"tl\",null,\"fil-PH\");\r\n    registerLCID(1125,\"DIV\",\"Divehi\",\"迪维希语(马尔代夫)\",\"ދިވެހިބަސް\",960,\"MDV\",\"Maldives\",\"马尔代夫\",\"ދިވެހި ރާއްޖެ\",0,1,2,\"\",null,\"dv-MV\");\r\n    registerLCID(1128,\"HAU\",\"Hausa (Latin)\",\"豪撒语(拉丁语，尼日利亚)\",\"Hausa\",234,\"NGA\",\"Nigeria\",\"尼日利亚\",\"Nigeria\",1252,437,10000,\"\",null,\"ha-Latn-NG\");\r\n    registerLCID(1130,\"YOR\",\"Yoruba\",\"约鲁巴语(尼日利亚)\",\"Yoruba\",234,\"NGA\",\"Nigeria\",\"尼日利亚\",\"Nigeria\",1252,437,10000,\"\",null,\"yo-NG\");\r\n    registerLCID(1131,\"QUB\",\"Quechua\",\"克丘亚语(玻利维亚)\",\"runasimi\",591,\"BOL\",\"Bolivia\",\"玻利维亚\",\"Bolivia Suyu\",1252,850,10000,\"\",null,\"quz-BO\");\r\n    registerLCID(1132,\"NSO\",\"Sesotho sa Leboa\",\"巴索托语(南非)\",\"Sesotho sa Leboa\",27,\"ZAF\",\"South Africa\",\"南非\",\"Afrika Borwa\",1252,850,10000,\"\",null,\"nso-ZA\");\r\n    registerLCID(1133,\"BAS\",\"Bashkir\",\"巴什基尔语(俄罗斯)\",\"Башҡорт\",7,\"RUS\",\"Russia\",\"俄罗斯\",\"Россия\",1251,866,10007,\"\",null,\"ba-RU\");\r\n    registerLCID(1134,\"LBX\",\"Luxembourgish\",\"卢森堡语(卢森堡)\",\"Lëtzebuergesch\",352,\"LUX\",\"Luxembourg\",\"卢森堡\",\"Luxembourg\",1252,850,10000,\"\",null,\"lb-LU\");\r\n    registerLCID(1135,\"KAL\",\"Greenlandic\",\"格陵兰语(格陵兰)\",\"kalaallisut\",299,\"GRL\",\"Greenland\",\"格陵兰\",\"Kalaallit Nunaat\",1252,850,10000,\"\",null,\"kl-GL\");\r\n    registerLCID(1136,\"IBO\",\"Igbo\",\"伊博语(尼日利亚)\",\"Igbo\",234,\"NGA\",\"Nigeria\",\"尼日利亚\",\"Nigeria\",1252,437,10000,\"\",null,\"ig-NG\");\r\n    registerLCID(1144,\"III\",\"Yi\",\"彝语(中国)\",\"ꆈꌠꁱꂷ\",86,\"CHN\",\"People`s Republic of China\",\"中华人民共和国\",\"ꍏꉸꏓꂱꇭꉼꇩ\",0,1,2,\"\",null,\"ii-CN\");\r\n    registerLCID(1146,\"MPD\",\"Mapudungun\",\"马普丹冈语(智利)\",\"Mapudungun\",56,\"CHL\",\"Chile\",\"智利\",\"Chile\",1252,850,10000,\"\",null,\"arn-CL\");\r\n    registerLCID(1148,\"MWK\",\"Mohawk\",\"莫霍克语(莫霍克)\",\"Kanien`kéha\",2,\"CAN\",\"Canada\",\"加拿大\",\"Canada\",1252,850,10000,\"\",null,\"moh-CA\");\r\n    registerLCID(1150,\"BRE\",\"Breton\",\"布里多尼语(法国)\",\"brezhoneg\",33,\"FRA\",\"France\",\"法国\",\"Frañs\",1252,850,10000,\"\",null,\"br-FR\");\r\n    registerLCID(1152,\"UIG\",\"Uyghur\",\"维吾尔语(中国)\",\"ئۇيغۇرچە\",86,\"CHN\",\"People`s Republic of China\",\"中华人民共和国\",\"جۇڭخۇا خەلق جۇمھۇرىيىتى\",1256,720,10004,\"\",null,\"ug-CN\");\r\n    registerLCID(1153,\"MRI\",\"Maori\",\"毛利语(新西兰)\",\"Reo Māori\",64,\"NZL\",\"New Zealand\",\"新西兰\",\"Aotearoa\",0,1,2,\"\",null,\"mi-NZ\");\r\n    registerLCID(1154,\"OCI\",\"Occitan\",\"奥克西唐语(法国)\",\"Occitan\",33,\"FRA\",\"France\",\"法国\",\"França\",1252,850,10000,\"\",null,\"oc-FR\");\r\n    registerLCID(1155,\"COS\",\"Corsican\",\"科西嘉语(法国)\",\"Corsu\",33,\"FRA\",\"France\",\"法国\",\"France\",1252,850,10000,\"\",null,\"co-FR\");\r\n    registerLCID(1156,\"GSW\",\"Alsatian\",\"阿尔萨斯语(法国)\",\"Elsässisch\",33,\"FRA\",\"France\",\"法国\",\"Frànkrisch\",1252,850,10000,\"\",null,\"gsw-FR\");\r\n    registerLCID(1157,\"SAH\",\"Yakut\",\"雅库特语(俄罗斯)\",\"саха\",7,\"RUS\",\"Russia\",\"俄罗斯\",\"Россия\",1251,866,10007,\"\",null,\"sah-RU\");\r\n    registerLCID(1158,\"QUT\",\"K`iche\",\"基切语(危地马拉)\",\"K`iche\",502,\"GTM\",\"Guatemala\",\"危地马拉\",\"Guatemala\",1252,850,10000,\"\",null,\"qut-GT\");\r\n    registerLCID(1159,\"KIN\",\"Kinyarwanda\",\"卢旺达语(卢旺达)\",\"Kinyarwanda\",250,\"RWA\",\"Rwanda\",\"卢旺达\",\"Rwanda\",1252,437,10000,\"\",null,\"rw-RW\");\r\n    registerLCID(1160,\"WOL\",\"Wolof\",\"沃洛夫语(塞内加尔)\",\"Wolof\",608,\"SEN\",\"Senegal\",\"塞内加尔\",\"Sénégal\",1252,850,10000,\"\",null,\"wo-SN\");\r\n    registerLCID(1164,\"PRS\",\"Dari\",\"达里语(阿富汗)\",\"درى\",93,\"AFG\",\"Afghanistan\",\"阿富汗\",\"افغانستان\",1256,720,10004,\"\",null,\"prs-AF\");\r\n    registerLCID(1169,\"GLA\",\"Scottish Gaelic\",\"苏格兰盖立语(英国)\",\"Gàidhlig\",44,\"GBR\",\"United Kingdom\",\"英国\",\"An Rìoghachd Aonaichte\",1252,850,10000,\"\",null,\"gd-GB\");\r\n    registerLCID(2049,\"ARI\",\"Arabic\",\"阿拉伯语(伊拉克)\",\"العربية\",964,\"IRQ\",\"Iraq\",\"伊拉克\",\"العراق\",1256,720,10004,\"ar\",\"ara\",\"ar-IQ\");\r\n    registerLCID(2052,\"CHS\",\"Chinese (Simplified)\",\"中文(简体，中国)\",\"中文(简体)\",86,\"CHN\",\"People`s Republic of China\",\"中华人民共和国\",\"中华人民共和国\",936,936,10008,\"zh-cn\",\"zh\",\"zh-CN\");\r\n    registerLCID(2055,\"DES\",\"German\",\"德语(瑞士)\",\"Deutsch\",41,\"CHE\",\"Switzerland\",\"瑞士\",\"Schweiz\",1252,850,10000,\"de\",\"de\",\"de-CH\");\r\n    registerLCID(2057,\"ENG\",\"English\",\"英语(英国)\",\"English\",44,\"GBR\",\"United Kingdom\",\"英国\",\"United Kingdom\",1252,850,10000,\"en\",\"en\",\"en-GB\");\r\n    registerLCID(2058,\"ESM\",\"Spanish\",\"西班牙语(墨西哥)\",\"Español\",52,\"MEX\",\"Mexico\",\"墨西哥\",\"México\",1252,850,10000,\"es\",\"spa\",\"es-MX\");\r\n    registerLCID(2060,\"FRB\",\"French\",\"法语(比利时)\",\"français\",32,\"BEL\",\"Belgium\",\"比利时\",\"Belgique\",1252,850,10000,\"fr\",\"fra\",\"fr-BE\");\r\n    registerLCID(2064,\"ITS\",\"Italian\",\"意大利语(瑞士)\",\"italiano\",41,\"CHE\",\"Switzerland\",\"瑞士\",\"Svizzera\",1252,850,10000,\"it\",\"it\",\"it-CH\");\r\n    registerLCID(2067,\"NLB\",\"Dutch\",\"荷兰语(比利时)\",\"Nederlands\",32,\"BEL\",\"Belgium\",\"比利时\",\"België\",1252,850,10000,\"nl\",\"nl\",\"nl-BE\");\r\n    registerLCID(2068,\"NON\",\"Norwegian (Nynorsk)\",\"尼诺斯克挪威语(挪威)\",\"norsk (nynorsk)\",47,\"NOR\",\"Norway\",\"挪威\",\"Noreg\",1252,850,10000,\"no\",null,\"nn-NO\");\r\n    registerLCID(2070,\"PTG\",\"Portuguese\",\"葡萄牙语(葡萄牙)\",\"português\",351,\"PRT\",\"Portugal\",\"葡萄牙\",\"Portugal\",1252,850,10000,\"pt\",\"pt\",\"pt-PT\");\r\n    registerLCID(2074,\"SRL\",\"Serbian (Latin)\",\"塞尔维亚语(拉丁语，塞尔维亚和黑山(前))\",\"srpski\",381,\"SCG\",\"Serbia and Montenegro (Former)\",\"塞尔维亚和黑山(前)\",\"Srbija i Crna Gora (Prethodno)\",1250,852,10029,\"sr\",null,\"sr-Latn-CS\");\r\n    registerLCID(2077,\"SVF\",\"Swedish\",\"瑞典语(芬兰)\",\"svenska\",358,\"FIN\",\"Finland\",\"芬兰\",\"Finland\",1252,850,10000,\"sv\",\"swe\",\"sv-FI\");\r\n    registerLCID(2092,\"AZC\",\"Azeri (Cyrillic)\",\"阿塞拜疆语(西里尔文，阿塞拜疆)\",\"Азәрбајҹан дили\",994,\"AZE\",\"Azerbaijan\",\"阿塞拜疆\",\"Азәрбајҹан\",1251,866,10007,\"\",null,\"az-Cyrl-AZ\");\r\n    registerLCID(2094,\"DSB\",\"Lower Sorbian\",\"下索布语(德国)\",\"dolnoserbšćina\",49,\"GER\",\"Germany\",\"德国\",\"Nimska\",1252,850,10000,\"\",null,\"dsb-DE\");\r\n    registerLCID(2107,\"SMF\",\"Sami (Northern)\",\"北萨米语(瑞典)\",\"davvisámegiella\",46,\"SWE\",\"Sweden\",\"瑞典\",\"Ruoŧŧa\",1252,850,10000,\"\",null,\"se-SE\");\r\n    registerLCID(2108,\"IRE\",\"Irish\",\"爱尔兰语(爱尔兰)\",\"Gaeilge\",353,\"IRL\",\"Ireland\",\"爱尔兰\",\"Éire\",1252,850,10000,\"ga\",null,\"ga-IE\");\r\n    registerLCID(2110,\"MSB\",\"Malay\",\"马来语(文莱达鲁萨兰国)\",\"Bahasa Melayu\",673,\"BRN\",\"Brunei Darussalam\",\"文莱达鲁萨兰国\",\"Brunei Darussalam\",1252,850,10000,\"ms\",null,\"ms-BN\");\r\n    registerLCID(2115,\"UZB\",\"Uzbek (Cyrillic)\",\"乌兹别克语(西里尔文，乌兹别克斯坦)\",\"Ўзбек\",7,\"UZB\",\"Uzbekistan\",\"乌兹别克斯坦\",\"Ўзбекистон Республикаси\",1251,866,10007,\"\",null,\"uz-Cyrl-UZ\");\r\n    registerLCID(2117,\"BNB\",\"Bengali\",\"孟加拉语(孟加拉国)\",\"বাংলা\",880,\"BGD\",\"Bangladesh\",\"孟加拉国\",\"বাংলাদেশ\",0,1,2,\"\",null,\"bn-BD\");\r\n    registerLCID(2128,\"MNG\",\"Mongolian (Traditional Mongolian)\",\"蒙古语(传统蒙古语，中国)\",\"ᠮᠤᠨᠭᠭᠤᠯ ᠬᠡᠯᠡ\",86,\"CHN\",\"People`s Republic of China\",\"中华人民共和国\",\"ᠪᠦᠭᠦᠳᠡ ᠨᠠᠢᠷᠠᠮᠳᠠᠬᠤ ᠳᠤᠮᠳᠠᠳᠤ ᠠᠷᠠᠳ ᠣᠯᠣᠰ\",0,1,2,\"\",null,\"mn-Mong-CN\");\r\n    registerLCID(2141,\"IUK\",\"Inuktitut (Latin)\",\"因纽特语(拉丁语，加拿大)\",\"Inuktitut\",2,\"CAN\",\"Canada\",\"加拿大\",\"kanata\",1252,437,10000,\"\",null,\"iu-Latn-CA\");\r\n    registerLCID(2143,\"TZM\",\"Tamazight (Latin)\",\"塔马塞特语(拉丁语，阿尔及利亚)\",\"Tamazight\",213,\"DZA\",\"Algeria\",\"阿尔及利亚\",\"Djazaïr\",1252,850,10000,\"\",null,\"tzm-Latn-DZ\");\r\n    registerLCID(2155,\"QUE\",\"Quechua\",\"克丘亚语(厄瓜多尔)\",\"runasimi\",593,\"ECU\",\"Ecuador\",\"厄瓜多尔\",\"Ecuador Suyu\",1252,850,10000,\"\",null,\"quz-EC\");\r\n    registerLCID(3073,\"ARE\",\"Arabic\",\"阿拉伯语(埃及)\",\"العربية\",20,\"EGY\",\"Egypt\",\"埃及\",\"مصر\",1256,720,10004,\"ar\",\"ara\",\"ar-EG\");\r\n    registerLCID(3076,\"ZHH\",\"Chinese (Traditional)\",\"中文(繁体，中国香港特别行政区)\",\"中文(繁體)\",852,\"HKG\",\"Hong Kong S.A.R.,China\",\"中国香港特别行政区\",\"中國香港特別行政區\",950,950,10002,\"zh-tw\",\"yue\",\"zh-HK\");\r\n    registerLCID(3079,\"DEA\",\"German\",\"德语(奥地利)\",\"Deutsch\",43,\"AUT\",\"Austria\",\"奥地利\",\"Österreich\",1252,850,10000,\"de\",\"de\",\"de-AT\");\r\n    registerLCID(3081,\"ENA\",\"English\",\"英语(澳大利亚)\",\"English\",61,\"AUS\",\"Australia\",\"澳大利亚\",\"Australia\",1252,850,10000,\"en\",\"en\",\"en-AU\");\r\n    registerLCID(3082,\"ESN\",\"Spanish\",\"西班牙语(西班牙，国际排序)\",\"español\",34,\"ESP\",\"Spain\",\"西班牙\",\"España\",1252,850,10000,\"es\",\"spa\",\"es-ES\");\r\n    registerLCID(3084,\"FRC\",\"French\",\"法语(加拿大)\",\"français\",2,\"CAN\",\"Canada\",\"加拿大\",\"Canada\",1252,850,10000,\"fr\",\"fra\",\"fr-CA\");\r\n    registerLCID(3098,\"SRB\",\"Serbian (Cyrillic)\",\"塞尔维亚语(西里尔文，塞尔维亚和黑山(前))\",\"српски\",381,\"SCG\",\"Serbia and Montenegro (Former)\",\"塞尔维亚和黑山(前)\",\"Србија и Црна Гора (Претходно)\",1251,855,10007,\"sr\",null,\"sr-Cyrl-CS\");\r\n    registerLCID(3131,\"SMG\",\"Sami (Northern)\",\"北萨米语(芬兰)\",\"davvisámegiella\",358,\"FIN\",\"Finland\",\"芬兰\",\"Suopma\",1252,850,10000,\"\",null,\"se-FI\");\r\n    registerLCID(3179,\"QUP\",\"Quechua\",\"克丘亚语(秘鲁)\",\"runasimi\",51,\"PER\",\"Peru\",\"秘鲁\",\"Peru Suyu\",1252,850,10000,\"\",null,\"quz-PE\");\r\n    registerLCID(4097,\"ARL\",\"Arabic\",\"阿拉伯语(利比亚)\",\"العربية\",218,\"LBY\",\"Libya\",\"利比亚\",\"ليبيا\",1256,720,10004,\"ar\",\"ara\",\"ar-LY\");\r\n    registerLCID(4100,\"ZHI\",\"Chinese (Simplified)\",\"中文(简体，新加坡)\",\"中文(简体)\",65,\"SGP\",\"Singapore\",\"新加坡\",\"新加坡\",936,936,10008,\"zh-cn\",null,\"zh-SG\");\r\n    registerLCID(4103,\"DEL\",\"German\",\"德语(卢森堡)\",\"Deutsch\",352,\"LUX\",\"Luxembourg\",\"卢森堡\",\"Luxemburg\",1252,850,10000,\"de\",\"de\",\"de-LU\");\r\n    registerLCID(4105,\"ENC\",\"English\",\"英语(加拿大)\",\"English\",2,\"CAN\",\"Canada\",\"加拿大\",\"Canada\",1252,850,10000,\"en\",\"en\",\"en-CA\");\r\n    registerLCID(4106,\"ESG\",\"Spanish\",\"西班牙语(危地马拉)\",\"Español\",502,\"GTM\",\"Guatemala\",\"危地马拉\",\"Guatemala\",1252,850,10000,\"es\",\"spa\",\"es-GT\");\r\n    registerLCID(4108,\"FRS\",\"French\",\"法语(瑞士)\",\"français\",41,\"CHE\",\"Switzerland\",\"瑞士\",\"Suisse\",1252,850,10000,\"fr\",\"fra\",\"fr-CH\");\r\n    registerLCID(4122,\"HRB\",\"Croatian (Latin)\",\"克罗地亚语(拉丁语，波斯尼亚和黑塞哥维那)\",\"hrvatski\",387,\"BIH\",\"Bosnia and Herzegovina\",\"波斯尼亚和黑塞哥维那\",\"Bosna i Hercegovina\",1250,852,10082,\"hr\",null,\"hr-BA\");\r\n    registerLCID(4155,\"SMJ\",\"Sami (Lule)\",\"律勒萨米语(挪威)\",\"julevusámegiella\",47,\"NOR\",\"Norway\",\"挪威\",\"Vuodna\",1252,850,10000,\"\",null,\"smj-NO\");\r\n    registerLCID(5121,\"ARG\",\"Arabic\",\"阿拉伯语(阿尔及利亚)\",\"العربية\",213,\"DZA\",\"Algeria\",\"阿尔及利亚\",\"الجزائر\",1256,720,10004,\"ar\",\"ara\",\"ar-DZ\");\r\n    registerLCID(5124,\"ZHM\",\"Chinese (Traditional)\",\"中文(繁体，中国澳门特别行政区)\",\"中文(繁體)\",853,\"MCO\",\"Macao S.A.R.,China\",\"中国澳门特别行政区\",\"中國澳門特別行政區\",950,950,10002,\"zh-tw\",null,\"zh-MO\");\r\n    registerLCID(5127,\"DEC\",\"German\",\"德语(列支敦士登)\",\"Deutsch\",41,\"LIE\",\"Liechtenstein\",\"列支敦士登\",\"Liechtenstein\",1252,850,10000,\"de\",\"de\",\"de-LI\");\r\n    registerLCID(5129,\"ENZ\",\"English\",\"英语(新西兰)\",\"English\",64,\"NZL\",\"New Zealand\",\"新西兰\",\"New Zealand\",1252,850,10000,\"en\",\"en\",\"en-NZ\");\r\n    registerLCID(5130,\"ESC\",\"Spanish\",\"西班牙语(哥斯达黎加)\",\"Español\",506,\"CRI\",\"Costa Rica\",\"哥斯达黎加\",\"Costa Rica\",1252,850,10000,\"es\",\"spa\",\"es-CR\");\r\n    registerLCID(5132,\"FRL\",\"French\",\"法语(卢森堡)\",\"français\",352,\"LUX\",\"Luxembourg\",\"卢森堡\",\"Luxembourg\",1252,850,10000,\"fr\",\"fra\",\"fr-LU\");\r\n    registerLCID(5146,\"BSB\",\"Bosnian (Latin)\",\"波斯尼亚语(拉丁语，波斯尼亚和黑塞哥维那)\",\"bosanski\",387,\"BIH\",\"Bosnia and Herzegovina\",\"波斯尼亚和黑塞哥维那\",\"Bosna i Hercegovina\",1250,852,10082,\"\",null,\"bs-Latn-BA\");\r\n    registerLCID(5179,\"SMK\",\"Sami (Lule)\",\"律勒萨米语(瑞典)\",\"julevusámegiella\",46,\"SWE\",\"Sweden\",\"瑞典\",\"Svierik\",1252,850,10000,\"\",null,\"smj-SE\");\r\n    registerLCID(6145,\"ARM\",\"Arabic\",\"阿拉伯语(摩洛哥)\",\"العربية\",212,\"MAR\",\"Morocco\",\"摩洛哥\",\"المملكة المغربية\",1256,720,10004,\"ar\",\"ara\",\"ar-MA\");\r\n    registerLCID(6153,\"ENI\",\"English\",\"英语(爱尔兰)\",\"English\",353,\"IRL\",\"Ireland\",\"爱尔兰\",\"Ireland\",1252,850,10000,\"en\",\"en\",\"en-IE\");\r\n    registerLCID(6154,\"ESA\",\"Spanish\",\"西班牙语(巴拿马)\",\"Español\",507,\"PAN\",\"Panama\",\"巴拿马\",\"Panamá\",1252,850,10000,\"es\",\"spa\",\"es-PA\");\r\n    registerLCID(6156,\"FRM\",\"French\",\"法语(摩纳哥)\",\"français\",377,\"MCO\",\"Principality of Monaco\",\"摩纳哥公国\",\"Principauté de Monaco\",1252,850,10000,\"fr\",\"fra\",\"fr-MC\");\r\n    registerLCID(6170,\"SRS\",\"Serbian (Latin)\",\"塞尔维亚语(拉丁语，波斯尼亚和黑塞哥维那)\",\"srpski\",387,\"BIH\",\"Bosnia and Herzegovina\",\"波斯尼亚和黑塞哥维那\",\"Bosna i Hercegovina\",1250,852,10082,\"sr\",null,\"sr-Latn-BA\");\r\n    registerLCID(6203,\"SMA\",\"Sami (Southern)\",\"南萨米语(挪威)\",\"åarjelsaemiengiele\",47,\"NOR\",\"Norway\",\"挪威\",\"Nöörje\",1252,850,10000,\"\",null,\"sma-NO\");\r\n    registerLCID(7169,\"ART\",\"Arabic\",\"阿拉伯语(突尼斯)\",\"العربية\",216,\"TUN\",\"Tunisia\",\"突尼斯\",\"تونس\",1256,720,10004,\"ar\",\"ara\",\"ar-TN\");\r\n    registerLCID(7177,\"ENS\",\"English\",\"英语(南非)\",\"English\",27,\"ZAF\",\"South Africa\",\"南非\",\"South Africa\",1252,437,10000,\"en\",\"en\",\"en-ZA\");\r\n    registerLCID(7178,\"ESD\",\"Spanish\",\"西班牙语(多米尼加共和国)\",\"Español\",1,\"DOM\",\"Dominican Republic\",\"多米尼加共和国\",\"República Dominicana\",1252,850,10000,\"es\",\"spa\",\"es-DO\");\r\n    registerLCID(7194,\"SRN\",\"Serbian (Cyrillic)\",\"塞尔维亚语(西里尔文，波斯尼亚和黑塞哥维那)\",\"српски\",387,\"BIH\",\"Bosnia and Herzegovina\",\"波斯尼亚和黑塞哥维那\",\"Босна и Херцеговина\",1251,855,10007,\"sr\",null,\"sr-Cyrl-BA\");\r\n    registerLCID(7227,\"SMB\",\"Sami (Southern)\",\"南萨米语(瑞典)\",\"åarjelsaemiengiele\",46,\"SWE\",\"Sweden\",\"瑞典\",\"Sveerje\",1252,850,10000,\"\",null,\"sma-SE\");\r\n    registerLCID(8193,\"ARO\",\"Arabic\",\"阿拉伯语(阿曼)\",\"العربية\",968,\"OMN\",\"Oman\",\"阿曼\",\"عمان\",1256,720,10004,\"ar\",\"ara\",\"ar-OM\");\r\n    registerLCID(8201,\"ENJ\",\"English\",\"英语(牙买加)\",\"English\",1,\"JAM\",\"Jamaica\",\"牙买加\",\"Jamaica\",1252,850,10000,\"en\",\"en\",\"en-JM\");\r\n    registerLCID(8202,\"ESV\",\"Spanish\",\"西班牙语(委内瑞拉玻利瓦尔共和国)\",\"Español\",58,\"VEN\",\"Bolivarian Republic of Venezuela\",\"委内瑞拉玻利瓦尔共和国\",\"Republica Bolivariana de Venezuela\",1252,850,10000,\"es\",\"spa\",\"es-VE\");\r\n    registerLCID(8218,\"BSC\",\"Bosnian (Cyrillic)\",\"波斯尼亚语(西里尔文，波斯尼亚和黑塞哥维那)\",\"босански\",387,\"BIH\",\"Bosnia and Herzegovina\",\"波斯尼亚和黑塞哥维那\",\"Босна и Херцеговина\",1251,855,10082,\"\",null,\"bs-Cyrl-BA\");\r\n    registerLCID(8251,\"SMS\",\"Sami (Skolt)\",\"斯科特萨米语(芬兰)\",\"sääm´ǩiõll\",358,\"FIN\",\"Finland\",\"芬兰\",\"Lää´ddjânnam\",1252,850,10000,\"\",null,\"sms-FI\");\r\n    registerLCID(9217,\"ARY\",\"Arabic\",\"阿拉伯语(也门)\",\"العربية\",967,\"YEM\",\"Yemen\",\"也门\",\"اليمن\",1256,720,10004,\"ar\",\"ara\",\"ar-YE\");\r\n    registerLCID(9225,\"ENB\",\"English\",\"英语(加勒比海)\",\"English\",1,\"CAR\",\"Caribbean\",\"加勒比海\",\"Caribbean\",1252,850,10000,\"en\",\"en\",\"en-CB\");\r\n    registerLCID(9226,\"ESO\",\"Spanish\",\"西班牙语(哥伦比亚)\",\"Español\",57,\"COL\",\"Colombia\",\"哥伦比亚\",\"Colombia\",1252,850,10000,\"es\",\"spa\",\"es-CO\");\r\n    registerLCID(9242,\"SRM\",\"Serbian (Latin)\",\"塞尔维亚语(拉丁语，塞尔维亚共和国)\",\"srpski\",381,\"SRB\",\"Serbia\",\"塞尔维亚共和国\",\"Srbija\",1250,852,10029,\"sr\",null,\"sr-Latn-RS\");\r\n    registerLCID(9275,\"SMN\",\"Sami (Inari)\",\"伊纳里萨米语(芬兰)\",\"sämikielâ\",358,\"FIN\",\"Finland\",\"芬兰\",\"Suomâ\",1252,850,10000,\"\",null,\"smn-FI\");\r\n    registerLCID(10241,\"ARS\",\"Arabic\",\"阿拉伯语(叙利亚)\",\"العربية\",963,\"SYR\",\"Syria\",\"叙利亚\",\"سوريا\",1256,720,10004,\"ar\",\"ara\",\"ar-SY\");\r\n    registerLCID(10249,\"ENL\",\"English\",\"英语(伯利兹)\",\"English\",501,\"BLZ\",\"Belize\",\"伯利兹\",\"Belize\",1252,850,10000,\"en\",\"en\",\"en-BZ\");\r\n    registerLCID(10250,\"ESR\",\"Spanish\",\"西班牙语(秘鲁)\",\"Español\",51,\"PER\",\"Peru\",\"秘鲁\",\"Perú\",1252,850,10000,\"es\",\"spa\",\"es-PE\");\r\n    registerLCID(10266,\"SRO\",\"Serbian (Cyrillic)\",\"塞尔维亚语(西里尔文，塞尔维亚共和国)\",\"српски\",381,\"SRB\",\"Serbia\",\"塞尔维亚共和国\",\"Србија\",1251,855,10007,\"sr\",null,\"sr-Cyrl-RS\");\r\n    registerLCID(11265,\"ARJ\",\"Arabic\",\"阿拉伯语(约旦)\",\"العربية\",962,\"JOR\",\"Jordan\",\"约旦\",\"الأردن\",1256,720,10004,\"ar\",\"ara\",\"ar-JO\");\r\n    registerLCID(11273,\"ENT\",\"English\",\"英语(特立尼达和多巴哥)\",\"English\",1,\"TTO\",\"Trinidad and Tobago\",\"特立尼达和多巴哥\",\"Trinidad y Tobago\",1252,850,10000,\"en\",\"en\",\"en-TT\");\r\n    registerLCID(11274,\"ESS\",\"Spanish\",\"西班牙语(阿根廷)\",\"Español\",54,\"ARG\",\"Argentina\",\"阿根廷\",\"Argentina\",1252,850,10000,\"es\",\"spa\",\"es-AR\");\r\n    registerLCID(11290,\"SRP\",\"Serbian (Latin)\",\"塞尔维亚语(拉丁语，黑山共和国)\",\"srpski\",381,\"MNE\",\"Montenegro\",\"黑山共和国\",\"Crna Gora\",1250,852,10029,\"sr\",null,\"sr-Latn-ME\");\r\n    registerLCID(12289,\"ARB\",\"Arabic\",\"阿拉伯语(黎巴嫩)\",\"العربية\",961,\"LBN\",\"Lebanon\",\"黎巴嫩\",\"لبنان\",1256,720,10004,\"ar\",\"ara\",\"ar-LB\");\r\n    registerLCID(12297,\"ENW\",\"English\",\"英语(津巴布韦)\",\"English\",263,\"ZWE\",\"Zimbabwe\",\"津巴布韦\",\"Zimbabwe\",1252,437,10000,\"en\",\"en\",\"en-ZW\");\r\n    registerLCID(12298,\"ESF\",\"Spanish\",\"西班牙语(厄瓜多尔)\",\"Español\",593,\"ECU\",\"Ecuador\",\"厄瓜多尔\",\"Ecuador\",1252,850,10000,\"es\",\"spa\",\"es-EC\");\r\n    registerLCID(12314,\"SRQ\",\"Serbian (Cyrillic)\",\"塞尔维亚语(西里尔文，黑山共和国)\",\"српски\",381,\"MNE\",\"Montenegro\",\"黑山共和国\",\"Црна Гора\",1251,855,10007,\"sr\",null,\"sr-Cyrl-ME\");\r\n    registerLCID(13313,\"ARK\",\"Arabic\",\"阿拉伯语(科威特)\",\"العربية\",965,\"KWT\",\"Kuwait\",\"科威特\",\"الكويت\",1256,720,10004,\"ar\",\"ara\",\"ar-KW\");\r\n    registerLCID(13321,\"ENP\",\"English\",\"英语(菲律宾共和国)\",\"English\",63,\"PHL\",\"Republic of the Philippines\",\"菲律宾共和国\",\"Philippines\",1252,437,10000,\"en\",\"en\",\"en-PH\");\r\n    registerLCID(13322,\"ESL\",\"Spanish\",\"西班牙语(智利)\",\"Español\",56,\"CHL\",\"Chile\",\"智利\",\"Chile\",1252,850,10000,\"es\",\"spa\",\"es-CL\");\r\n    registerLCID(14337,\"ARU\",\"Arabic\",\"阿拉伯语(阿联酋)\",\"العربية\",971,\"ARE\",\"U.A.E.\",\"阿联酋\",\"الإمارات العربية المتحدة\",1256,720,10004,\"ar\",\"ara\",\"ar-AE\");\r\n    registerLCID(14346,\"ESY\",\"Spanish\",\"西班牙语(乌拉圭)\",\"Español\",598,\"URY\",\"Uruguay\",\"乌拉圭\",\"Uruguay\",1252,850,10000,\"es\",\"spa\",\"es-UY\");\r\n    registerLCID(15361,\"ARH\",\"Arabic\",\"阿拉伯语(巴林)\",\"العربية\",973,\"BHR\",\"Bahrain\",\"巴林\",\"البحرين\",1256,720,10004,\"ar\",\"ara\",\"ar-BH\");\r\n    registerLCID(15370,\"ESZ\",\"Spanish\",\"西班牙语(巴拉圭)\",\"Español\",595,\"PRY\",\"Paraguay\",\"巴拉圭\",\"Paraguay\",1252,850,10000,\"es\",\"spa\",\"es-PY\");\r\n    registerLCID(16385,\"ARQ\",\"Arabic\",\"阿拉伯语(卡塔尔)\",\"العربية\",974,\"QAT\",\"Qatar\",\"卡塔尔\",\"قطر\",1256,720,10004,\"ar\",\"ara\",\"ar-QA\");\r\n    registerLCID(16393,\"ENN\",\"English\",\"英语(印度)\",\"English\",91,\"IND\",\"India\",\"印度\",\"India\",1252,437,10000,\"en\",\"en\",\"en-IN\");\r\n    registerLCID(16394,\"ESB\",\"Spanish\",\"西班牙语(玻利维亚)\",\"Español\",591,\"BOL\",\"Bolivia\",\"玻利维亚\",\"Bolivia\",1252,850,10000,\"es\",\"spa\",\"es-BO\");\r\n    registerLCID(17417,\"ENM\",\"English\",\"英语(马来西亚)\",\"English\",60,\"MYS\",\"Malaysia\",\"马来西亚\",\"Malaysia\",1252,437,10000,\"en\",\"en\",\"en-MY\");\r\n    registerLCID(17418,\"ESE\",\"Spanish\",\"西班牙语(萨尔瓦多)\",\"Español\",503,\"SLV\",\"El Salvador\",\"萨尔瓦多\",\"El Salvador\",1252,850,10000,\"es\",\"spa\",\"es-SV\");\r\n    registerLCID(18441,\"ENE\",\"English\",\"英语(新加坡)\",\"English\",65,\"SGP\",\"Singapore\",\"新加坡\",\"Singapore\",1252,437,10000,\"en\",\"en\",\"en-SG\");\r\n    registerLCID(18442,\"ESH\",\"Spanish\",\"西班牙语(洪都拉斯)\",\"Español\",504,\"HND\",\"Honduras\",\"洪都拉斯\",\"Honduras\",1252,850,10000,\"es\",\"spa\",\"es-HN\");\r\n    registerLCID(19466,\"ESI\",\"Spanish\",\"西班牙语(尼加拉瓜)\",\"Español\",505,\"NIC\",\"Nicaragua\",\"尼加拉瓜\",\"Nicaragua\",1252,850,10000,\"es\",\"spa\",\"es-NI\");\r\n    registerLCID(20490,\"ESU\",\"Spanish\",\"西班牙语(波多黎各)\",\"Español\",1,\"PRI\",\"Puerto Rico\",\"波多黎各\",\"Puerto Rico\",1252,850,10000,\"es\",\"spa\",\"es-PR\");\r\n    registerLCID(21514,\"EST\",\"Spanish\",\"西班牙语(美国)\",\"Español\",1,\"USA\",\"United States\",\"美国\",\"Estados Unidos\",1252,850,10000,\"es\",\"spa\",\"es-US\");\r\n}\r\n\r\ninit();\r\nlet acroMLCulture = {\r\n    items: g_cultures,\r\n    findCultureByLCID: function (LCID) {\r\n        return g_cultures_byLCID[LCID.toString()];\r\n    },\r\n    findCultureByTag: function (Tag) {\r\n        return g_cultures_byTag[Tag];\r\n    },\r\n    tag2LCID: function (Tag) {\r\n        var c = g_cultures_byTag[Tag];\r\n        if (c)\r\n            return c.LCID;\r\n        else\r\n            return null;\r\n    },\r\n    LCID2Tag: function (LCID) {\r\n        var c = g_cultures_byLCID[LCID];\r\n        if (c)\r\n            return c.Tag;\r\n        else\r\n            return null;\r\n    }\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (acroMLCulture);\r\n\n\n//# sourceURL=webpack://AcroML/../src/acroML.Culture.mjs?");

/***/ }),

/***/ "../src/acroML.DD.mjs":
/*!****************************!*\
  !*** ../src/acroML.DD.mjs ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DD: () => (/* binding */ AcroMLDD),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nlet ddInfos={};\r\nclass AcroMLDD {\r\n\tconstructor(){\r\n\t\tthis.fIsDDBuilded = false;\r\n\t\tthis.DD = {};\r\n\t\tthis.LCIDList = {};\r\n\t}\r\n\tdoBeforeBuildDD() {\r\n\t}\r\n\r\n\tdoAfterBuildDD() {\r\n\t}\r\n\r\n\tdoNotFoundDisplayValue(ADDKey, ALCID, ASeqNo) {\r\n\t}\r\n\r\n\tbuildingDD() {\r\n\t\t//console.log('call acroMLDD.buildingDD');\r\n\t}\r\n\r\n\tbuildDD() {\r\n\t\tthis.doBeforeBuildDD();\r\n\t\tthis.buildingDD();\r\n\t\tthis.fIsDDBuilded = true;\r\n\t\tthis.doAfterBuildDD();\r\n\t}\r\n\r\n\t// / <summary>\r\n\t// / 查找ADDKey的翻译字串\r\n\t// / </summary>\r\n\t// / <param name=\"ADDKey\">原语</param>\r\n\t// / <param name=\"ALCID\">语言ID</param>\r\n\t// / <param name=\"ASeqNo\">序号</param>\r\n\t// / <param name=\"AFound\">是否找到</param>\r\n\t// / <returns>返回找到的翻译字串</returns>\r\n\tgetDisplayValue(ADDKey, ALCID, ASeqNo, AFound) {\r\n\t\tif (!ASeqNo)\r\n\t\t\tASeqNo = 0;\r\n\t\tif (AFound != null)\r\n\t\t\tAFound.value = false;\r\n\t\tif (ADDKey == null || ADDKey.length <= 0)\r\n\t\t\treturn \"\";\r\n\t\tvar vKey;\r\n\t\tvar vDisplayValue;\r\n\r\n\t\t// /Build的过程不能多线程访问\r\n\t\tif (!this.fIsDDBuilded)\r\n\t\t\tthis.buildDD();\r\n\r\n\t\tvKey = ADDKey + '\\u0009' + ALCID + '\\u0009' + ASeqNo.toString();\r\n\r\n\t\tvDisplayValue = this.DD[vKey];\r\n\t\tif (vDisplayValue == null) {\r\n\t\t\tvDisplayValue = ADDKey;\r\n\t\t\tif (AFound != null)\r\n\t\t\t\tAFound.value = false;\r\n\t\t\tthis.doNotFoundDisplayValue(ADDKey, ALCID, ASeqNo);\r\n\t\t} else {\r\n\t\t\tif (AFound != null)\r\n\t\t\t\tAFound.value = true;\r\n\t\t}\r\n\t\treturn vDisplayValue;\r\n\t}\r\n\r\n\taddDisplayValue(DDKey, LCID, SeqNo, DisplayValue) {\r\n\t\tvar vKey;\r\n\t\tvKey = DDKey + '\\u0009' + LCID;\r\n\t\tvKey =\r\n\t\t\tvKey + '\\u0009'\r\n\t\t\t\t+ ((SeqNo == null || SeqNo.length <= 0) ? \"0\" : SeqNo);\r\n\t\tvar vLCID = LCID.toString();\r\n\t\tthis.LCIDList[vLCID] = vLCID;\r\n\t\tthis.DD[vKey] = DisplayValue;\r\n\t}\r\n\r\n\tstatic registerDD(fileExt,encoding,bom,ddClass){\r\n\t\tddInfos[fileExt]={encoding,bom,class:ddClass};\r\n\t}\r\n\tstatic getDDByFileExt(ddFile){\r\n\t\tfor(let key in ddInfos){\r\n\t\t\t\tlet ext=ddFile.substr(ddFile.length-key.length);\r\n\t\t\t\tif (ext==key) return ddInfos[key];\r\n\t\t}\r\n\t}\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AcroMLDD);\r\n\n\n//# sourceURL=webpack://AcroML/../src/acroML.DD.mjs?");

/***/ }),

/***/ "../src/acroML.Engine.mjs":
/*!********************************!*\
  !*** ../src/acroML.Engine.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Engine: () => (/* binding */ AcroMLEngine),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _acroML_Resources_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./acroML.Resources.mjs */ \"../src/acroML.Resources.mjs\");\n/* harmony import */ var _acroML_Utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./acroML.Utils.mjs */ \"../src/acroML.Utils.mjs\");\n/* harmony import */ var _acroML_DD_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./acroML.DD.mjs */ \"../src/acroML.DD.mjs\");\n\r\n\r\n\r\nlet onDisplayValueLostEvents=[];\r\nclass AcroMLEngine{\r\n    readDD(ddFile){\r\n    }\r\n    getDisplayValue(DDKey,LCID){\r\n        if (!this.dd) return DDKey;\r\n        let isFound={value:false};\r\n        let text=this.dd.getDisplayValue(DDKey,LCID,'0',isFound);\r\n        //console.log(DDKey,isFound);\r\n        if (!isFound.value){\r\n            for(let i=0;i<onDisplayValueLostEvents.length;i++){\r\n                onDisplayValueLostEvents[i](DDKey,LCID,'0');\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n    start(ops){\r\n        //console.log(ops);\r\n        let self=this;\r\n        return new Promise(function(resolve, reject){\r\n            self.ddFile=ops.ddFile;\r\n            if (ops.ddContentStr){\r\n                try{\r\n                    self.dd=AcroMLEngine.buildDD(ops.ddFile,ddContentStr);\r\n                    resolve();\r\n                }\r\n                catch(e){\r\n                    reject(e);\r\n                }\r\n            }\r\n            else{\r\n                self.readDD(ops.ddFile).then(function(ddContent){\r\n                    //console.log('dd readed');    \r\n                    self.dd=AcroMLEngine.buildDD(ops.ddFile,ddContent.str);\r\n                    resolve();\r\n                },reject);\r\n            }\r\n        });\r\n    }\r\n    static buildDD(ddFile,ddStr){\r\n        //console.log(content);\r\n        let ddInfo=_acroML_DD_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getDDByFileExt(ddFile);\r\n        //console.log(DDClass);\r\n        if (!ddInfo) throw new Error(_acroML_Utils_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].printf(_acroML_Resources_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].S_UnknownFileExt,ddFile));\r\n        let dd=new ddInfo.class();\r\n        dd.content=ddStr;\r\n        dd.buildDD();\r\n        return dd;\r\n    }\r\n    static onDisplayValueLost(cb){\r\n        onDisplayValueLostEvents.push(cb);\r\n    }\r\n    static init(ops){\r\n        AcroMLEngine.instance=new ops.engineClass();\r\n        return AcroMLEngine.instance.start(ops);\r\n    }\r\n    static instance=null;\r\n    static onSwitchLanguage=null;\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AcroMLEngine);\r\n\n\n//# sourceURL=webpack://AcroML/../src/acroML.Engine.mjs?");

/***/ }),

/***/ "../src/acroML.Resources.mjs":
/*!***********************************!*\
  !*** ../src/acroML.Resources.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   resources: () => (/* binding */ acroMLResources)\n/* harmony export */ });\nlet acroMLResources ={\r\n\tS_CSVFormatError : 'CSV format error,char after \"%\" not \"c\",\"n\",\"0\",or \"%\".',\r\n\tS_NotFoundField : 'Not found \"%s\" Field!',\r\n\tS_OnlyOneInstance : '\"%s\" only allow create one instance.',\r\n\tS_UnknownFileExt: 'Unknown file extension \"%s\".'\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (acroMLResources);\r\n\n\n//# sourceURL=webpack://AcroML/../src/acroML.Resources.mjs?");

/***/ }),

/***/ "../src/acroML.Utils.mjs":
/*!*******************************!*\
  !*** ../src/acroML.Utils.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   utils: () => (/* binding */ acroMLUtils)\n/* harmony export */ });\nlet base = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\nlet acroMLUtils={\r\n    base64ToBuf:function(base64Data) {\r\n        // base64Data.\r\n        let equalCount = base64Data.match(/=/g) || 0;\r\n        base64Data = base64Data.replace(/=/g, '');\r\n        let len = base64Data.length;\r\n        let mod = len % 4;\r\n        let sum = Math.floor(len / 4);\r\n        let idx = 0;\r\n        let moreLen = 0;\r\n        if (equalCount && equalCount.length == 1) moreLen = 2;\r\n        if (equalCount && equalCount.length == 2) moreLen = 1;\r\n        let buf = new Uint8Array(sum * 3 + moreLen);\r\n        for (let i = 0; i < sum * 4; i += 4) {\r\n            let char0 = base64Data[i];\r\n            let char1 = base64Data[i + 1];\r\n            let char2 = base64Data[i + 2];\r\n            let char3 = base64Data[i + 3];\r\n            let charIdx0 = base.indexOf(char0);\r\n            let charIdx1 = base.indexOf(char1);\r\n            let charIdx2 = base.indexOf(char2);\r\n            let charIdx3 = base.indexOf(char3);\r\n            if (charIdx0 == -1 || charIdx1 == -1 || charIdx2 == -1 || charIdx3 == -1) {\r\n                continue;\r\n            }\r\n            // byte1 = \r\n            // 后6 前2\r\n            buf[idx++] = (charIdx0 << 2) | (charIdx1 >> 4 & 0x03);\r\n            buf[idx++] = (charIdx1 << 4) | (charIdx2 >> 2 & 0x0f);\r\n            buf[idx++] = (charIdx2 << 6) | (charIdx3 & 0x3f);\r\n        }\r\n        if (equalCount && equalCount.length > 0) {\r\n            if (equalCount.length == 1) {\r\n                let charIdx0 = base.indexOf(base64Data[base64Data.length - 3]);\r\n                let charIdx1 = base.indexOf(base64Data[base64Data.length - 2]);\r\n                let charIdx2 = base.indexOf(base64Data[base64Data.length - 1]);\r\n                // 一个等号说明有三位码，18bit(实16bit) 可以合成2位 \r\n                buf[buf.length - 2] = (charIdx0 << 2) | (charIdx1 >> 4);\r\n                buf[buf.length - 1] = (charIdx1 << 4) | (charIdx2 >> 2);\r\n            } else if (equalCount.length == 2) {\r\n                // 一个等号说明有二位码，可以合成1位\r\n                let charIdx0 = base.indexOf(base64Data[base64Data.length - 2]);\r\n                let charIdx1 = base.indexOf(base64Data[base64Data.length - 1]);\r\n                buf[buf.length - 1] = (charIdx0 << 2) | (charIdx1 >> 4);\r\n            }\r\n        }\r\n        return buf;\r\n    },\r\n    encodeBase64(str){\r\n        function padEnd(str, len, prefix) {\r\n            return (str + (new Array(len + 1)).join(prefix)).slice(0, len);\r\n        }\r\n        function padStart(str, len, prefix) {\r\n            return ((new Array(len + 1).join(prefix)) + str).slice(-len);\r\n        }\r\n        let byteStr = ''\r\n        for(let ch of encodeUtf8(str)){ \r\n            byteStr = byteStr + padStart(ch.toString(2),8,0);\r\n        }\r\n        let rest = byteStr.length % 6 // 余2 就是剩下了一个字节，余 4 就是剩下两个字节\r\n        let restStr = rest === prefixTwo ? '==' :'=';\r\n        let prefixzero = rest === prefixTwo ? prefixfour: prefixTwo;\r\n        byteStr = padEnd(byteStr , byteStr.length + prefixzero,'0');\r\n        return byteStr.match(/(\\d{6})/g).map(val=>parseInt(val,2)).map(val=>CHARTS[val]).join('') + restStr;\r\n    },\r\n    decodeBase64(str) {\r\n            let [...restStr] = str.replace(/=/g,'')\r\n            restStr = restStr.map((item)=> {\r\n            let value = CHARTS.indexOf(item);\r\n            return padStart(value.toString(2),6,0);\r\n            }).join('').match(/(\\d{8})/g).map((item)=>parseInt(item,2).toString(16)).join();\r\n            console.log(restStr);\r\n            return restStr;\r\n    },\r\n    //https://qa.1r1g.com/sf/ask/1021465511/\r\n    ucs2_str_8:function(uint8Array) {\r\n        let uint16Array = new Uint16Array(uint8Array.length/2);\r\n        for( let i = 0; i < uint8Array.length; i+=2) {\r\n            uint16Array[i/2]=(uint8Array[i] | ( uint8Array[i+1] << 8 ));\r\n        }\r\n        return this.ucs2_str_16(uint16Array); \r\n    },\r\n    ucs2_str_16:function(uint16Array) {\r\n        let a=new Array(uint16Array.length);\r\n        for(let i=0;i<uint16Array.length;i++) a[i]=String.fromCharCode(uint16Array[i]);\r\n        return a.join('');\r\n        //用apply时，如果数组超过200k，会报错RangeError: Maximum call stack size exceeded\r\n        //return String.fromCharCode.apply(String,cp);\r\n    },\r\n    ucs2_str_buffer:function(arrayBuffer) {\r\n        let uint16Array=new Uint16Array(arrayBuffer);\r\n        return this.ucs2_str_16(uint16Array);\r\n    },\r\n    /**\r\n     * 把js字符串（UTF-8）转成UCS-2格式（UTF-16LE，兼容Delphi的WideString）\r\n     * @param {*} str \r\n     * @returns \r\n     */\r\n    str_ucs2:function(str,isAddBOM=true){\r\n        let len=str.length*2;\r\n        if (isAddBOM) len=len+2;\r\n        let buf = new ArrayBuffer(len); // 每个字符占用2个字节\r\n        let bufView = new Uint16Array(buf);\r\n        let index=0;\r\n        if (isAddBOM){\r\n            bufView[0]=0xFEFF;//BOM\r\n            index=index+1;\r\n        }\r\n        for (let i=0, strLen=str.length; i<strLen; i++) {\r\n            bufView[index+i] = str.charCodeAt(i);\r\n        }\r\n        return bufView;\r\n    },\r\n    /**\r\n     * 把字符串转成utf-8编码。\r\n     * 兼容ECS5，用charCodeAt函数，不能处理某些特定的4字节的字符，比如：🀢🀣🀤🀥🀦🀧🀨🀩\r\n     * @param {*} str 字符串\r\n     * @returns Array类型数组\r\n     */\r\n    str_utf8_1:function(str) {\r\n        let utf8Arr = [];\r\n        let byteSize = 0;\r\n        for (let i = 0; i < str.length; i++) {\r\n            //获取字符Unicode码值\r\n            let code = str.charCodeAt(i);\r\n            //如果码值是1个字节的范围，则直接写入\r\n            if (code >= 0x00 && code <= 0x7f) {\r\n                byteSize += 1;\r\n                utf8Arr.push(code);\r\n                //如果码值是2个字节以上的范围，则按规则进行填充补码转换\r\n            } else if (code >= 0x80 && code <= 0x7ff) {\r\n                byteSize += 2;\r\n                utf8Arr.push((192 | (31 & (code >> 6))));\r\n                utf8Arr.push((128 | (63 & code)))\r\n            } else if ((code >= 0x800 && code <= 0xd7ff)\r\n                || (code >= 0xe000 && code <= 0xffff)) {\r\n                byteSize += 3;\r\n                utf8Arr.push((224 | (15 & (code >> 12))));\r\n                utf8Arr.push((128 | (63 & (code >> 6))));\r\n                utf8Arr.push((128 | (63 & code)))\r\n            } else if(code >= 0x10000 && code <= 0x10ffff ){\r\n                byteSize += 4;\r\n                utf8Arr.push((240 | (7 & (code >> 18))));\r\n                utf8Arr.push((128 | (63 & (code >> 12))));\r\n                utf8Arr.push((128 | (63 & (code >> 6))));\r\n                utf8Arr.push((128 | (63 & code)))\r\n            }\r\n            else{\r\n                throw new Error('can`t deal code:'+code);\r\n            }\r\n        }\r\n        return utf8Arr;\r\n    },\r\n    /**\r\n     * 把字符串转成utf-8编码。利用浏览器自带的TextEncoder元件。\r\n     * 能处理全部特定4字节的字符，比如：🀢🀣🀤🀥🀦🀧🀨🀩\r\n     * @param {*} str 字符串\r\n     * @returns Uint8Array类型数组\r\n     */\r\n    str_utf8_2(str){\r\n        let encoder = new TextEncoder();\r\n        let uint8Array = encoder.encode(str);\r\n        return uint8Array;\r\n    },\r\n    utf8_str_2(uint8Array){\r\n        let decoder = new TextDecoder();\r\n        let str = decoder.decode(uint8Array,{\r\n            fatal:true,\r\n            ignoreBOM:false\r\n        });\r\n        return str;\r\n    },\r\n    /**\r\n     * 把字符串转成utf-8编码。兼容ECS6，用codePointAt函数。\r\n     * 能处理全部特定4字节的字符，比如：🀢🀣🀤🀥🀦🀧🀨🀩\r\n     * @param {*} str 字符串\r\n     * @returns Array类型数组\r\n     */\r\n    str_utf8_3(str) {\r\n        let bytes = [];\r\n        for (let ch of str) {\r\n            // for...of循环，能正确识别 32 位的 UTF-16 字符\r\n            let code = ch.codePointAt(0);\r\n            if (code >= 0x10000 && code <= 0x10ffff) {// 位运算， 补齐8位\r\n                bytes.push((code >> 18) | 0xf0);\r\n                bytes.push(((code >> 12) & 0x3f) | 0x80);\r\n                bytes.push(((code >> 6) & 0x3f) | 0x80);\r\n                bytes.push((code & 0x3f) | 0x80);\r\n            } else if (code >= 0x800 && code <= 0xffff) {\r\n                bytes.push((code >> 12) | 0xe0);\r\n                bytes.push(((code >> 6) & 0x3f) | 0x80);\r\n                bytes.push((code & 0x3f) | 0x80);\r\n            } else if (code >= 0x80 && code <= 0x7ff) {\r\n                bytes.push((code >> 6) | 0xc0);\r\n                bytes.push((code & 0x3f) | 0x80);\r\n            } else {\r\n                bytes.push(code);\r\n            }\r\n        }\r\n        return bytes;\r\n    },\r\n    utf8_str_3(bytes) {\r\n        function padStart(str, len, prefix) {\r\n            return ((new Array(len + 1).join(prefix)) + str).slice(-len); //也可用 new Array(len+1).fill(0)\r\n        }\r\n        let strValue = ''\r\n        for (let i = 0; i < bytes.length; ) {\r\n            let code = bytes[i];\r\n            let code1, code2, code3, code4, hex;\r\n            if ((code & 0xf0) == 0xf0) {\r\n                code1 = (code & 0x03).toString(2);\r\n                code2 = padStart((bytes[i + 1] & 0x3f).toString(2),6, '0');\r\n                code3 = padStart((bytes[i + 2] & 0x3f).toString(2),6, '0');\r\n                code4 = padStart((bytes[i + 3] & 0x3f).toString(2),6, '0');\r\n                hex = parseInt((code1 + code2 + code3 + code4),2);\r\n                strValue = strValue + String.fromCodePoint(hex);\r\n                i = i + 4;\r\n            } else if ((code & 0xe0) == 0xe0) {\r\n                code1 = (code & 0x07).toString(2);\r\n                code2 = padStart((bytes[i + 1] & 0x3f).toString(2),6, '0');\r\n                code3 = padStart((bytes[i + 2]& 0x3f).toString(2),6, '0');\r\n                hex = parseInt((code1 + code2 + code3),2);\r\n                strValue = strValue + String.fromCodePoint(hex);\r\n                i = i + 3;\r\n            } else if ((code & 0xc0) == 0xc0) {\r\n                code1 = (code & 0x0f).toString(2);\r\n                code2 = padStart((bytes[i + 1] & 0x3f).toString(2),6, '0');\r\n                hex = parseInt((bytes + code2),2);\r\n                strValue = strValue + String.fromCodePoint(hex);\r\n                i = i + 2;\r\n            } else {\r\n                hex = code;\r\n                strValue = strValue + String.fromCodePoint(code);\r\n                i = i + 1;\r\n            }\r\n        }\r\n        return strValue;\r\n    },\r\n    /**类似c#的format，格式化字符串，如：'DDKey \"{0}\" already exists.' */\r\n    format:function(template) {\r\n        let args = Array.prototype.slice.call(arguments, 1);\r\n        return template.replace(/{(\\d+)}/g, function(match, number) { \r\n            return typeof args[number] != 'undefined'\r\n            ? args[number] \r\n            : match\r\n            ;\r\n        });\r\n    },\r\n    /**\r\n    *  类似c语言的printf，delphi的format，nodejs的util.format\r\n    *  格式化字符串，如：printf('I am a %s at %s.','student','shanghai')\r\n    *  http://www.webtoolkit.info/\r\n    **/\r\n    printf : function () {\r\n        function convert(match, nosign){\r\n            if (nosign) {\r\n                match.sign = '';               \r\n            } else {                \r\n                match.sign = match.negative ? '-' : match.sign;               \r\n            }                \r\n            var l = match.min - match.argument.length + 1 - match.sign.length;         \r\n            var pad = new Array(l < 0 ? 0 : l).join(match.pad);        \r\n            if (!match.left) {       \r\n                if (match.pad == \"0\" || nosign) {  \r\n                    return match.sign + pad + match.argument;\r\n                } else { \r\n                    return pad + match.sign + match.argument; \r\n                }\r\n            } else {\r\n                if (match.pad == \"0\" || nosign) {\r\n                    return match.sign + match.argument + pad.replace(/0/g, ' ');\r\n                } else {\r\n                    return match.sign + match.argument + pad;\r\n                }\r\n            }\r\n        }\r\n        if (typeof arguments == \"undefined\") { return null; }\r\n        if (arguments.length < 1) { return null; }\r\n        if (typeof arguments[0] != \"string\") { return null; }\r\n        if (typeof RegExp == \"undefined\") { return null; }\r\n        var string = arguments[0];\r\n        var exp = new RegExp(/(%([%]|(\\-)?(\\+|\\x20)?(0)?(\\d+)?(\\.(\\d)?)?([bcdfosxX])))/g);\r\n        var matches = new Array();\r\n        var strings = new Array();\r\n        var convCount = 0;\r\n        var stringPosStart = 0;\r\n        var stringPosEnd = 0;\r\n        var matchPosEnd = 0;\r\n        var newString = '';\r\n        var match = null;\r\n        while (match = exp.exec(string)) {\r\n            if (match[9]) { convCount += 1; }\r\n            stringPosStart = matchPosEnd;\r\n            stringPosEnd = exp.lastIndex - match[0].length;\r\n            strings[strings.length] = string.substring(stringPosStart, stringPosEnd);\r\n            matchPosEnd = exp.lastIndex;\r\n            matches[matches.length] = {\r\n                match: match[0],\r\n                left: match[3] ? true : false,\r\n                sign: match[4] || '',\r\n                pad: match[5] || ' ',\r\n                min: match[6] || 0,\r\n                precision: match[8],\r\n                code: match[9] || '%',\r\n                negative: parseInt(arguments[convCount]) < 0 ? true : false,\r\n                argument: String(arguments[convCount])\r\n            };\r\n        }\r\n        strings[strings.length] = string.substring(matchPosEnd);\r\n        if (matches.length == 0) { return string; }\r\n        if ((arguments.length - 1) < convCount) { return null; }\r\n        var code = null;\r\n        var match = null;\r\n        var i = null;\r\n        for (i=0; i<matches.length; i++) {\r\n            let substitution;\r\n            if (matches[i].code == '%') { substitution = '%' }\r\n            else if (matches[i].code == 'b') {\r\n                matches[i].argument = String(Math.abs(parseInt(matches[i].argument)).toString(2));\r\n                substitution = convert(matches[i], true);\r\n            }\r\n            else if (matches[i].code == 'c') {\r\n                matches[i].argument = String(String.fromCharCode(parseInt(Math.abs(parseInt(matches[i].argument)))));\r\n                substitution = convert(matches[i], true);\r\n            }\r\n            else if (matches[i].code == 'd') {\r\n                matches[i].argument = String(Math.abs(parseInt(matches[i].argument)));\r\n                substitution = convert(matches[i]);\r\n            }\r\n            else if (matches[i].code == 'f') {\r\n                matches[i].argument = String(Math.abs(parseFloat(matches[i].argument)).toFixed(matches[i].precision ? matches[i].precision : 6));\r\n                substitution = convert(matches[i]);\r\n            }\r\n            else if (matches[i].code == 'o') {\r\n                matches[i].argument = String(Math.abs(parseInt(matches[i].argument)).toString(8));\r\n                substitution = convert(matches[i]);\r\n            }\r\n            else if (matches[i].code == 's') {\r\n                matches[i].argument = matches[i].argument.substring(0, matches[i].precision ? matches[i].precision : matches[i].argument.length)\r\n                substitution = convert(matches[i], true);\r\n            }\r\n            else if (matches[i].code == 'x') {\r\n                matches[i].argument = String(Math.abs(parseInt(matches[i].argument)).toString(16));\r\n                substitution = convert(matches[i]);\r\n            }\r\n            else if (matches[i].code == 'X') {\r\n                matches[i].argument = String(Math.abs(parseInt(matches[i].argument)).toString(16));\r\n                substitution = convert(matches[i]).toUpperCase();\r\n            }\r\n            else {\r\n                substitution = matches[i].match;\r\n            }\r\n            newString += strings[i];\r\n            newString += substitution;\r\n        }\r\n        newString += strings[i];\r\n        return newString;\r\n    }\r\n}\r\nacroMLUtils.str_utf8=acroMLUtils.str_utf8_3;\r\nacroMLUtils.utf8_str=acroMLUtils.utf8_str_3;\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (acroMLUtils);\r\n\n\n//# sourceURL=webpack://AcroML/../src/acroML.Utils.mjs?");

/***/ }),

/***/ "../src/index.core.mjs":
/*!*****************************!*\
  !*** ../src/index.core.mjs ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DD: () => (/* reexport safe */ _acroML_DD_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   Engine: () => (/* reexport safe */ _acroML_Engine_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   culture: () => (/* reexport safe */ _acroML_Culture_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   resources: () => (/* reexport safe */ _acroML_Resources_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   t: () => (/* binding */ t),\n/* harmony export */   utils: () => (/* reexport safe */ _acroML_Utils_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _acroML_Resources_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./acroML.Resources.mjs */ \"../src/acroML.Resources.mjs\");\n/* harmony import */ var _acroML_Utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./acroML.Utils.mjs */ \"../src/acroML.Utils.mjs\");\n/* harmony import */ var _acroML_Culture_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./acroML.Culture.mjs */ \"../src/acroML.Culture.mjs\");\n/* harmony import */ var _acroML_DD_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./acroML.DD.mjs */ \"../src/acroML.DD.mjs\");\n/* harmony import */ var _acroML_Engine_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./acroML.Engine.mjs */ \"../src/acroML.Engine.mjs\");\n/**\r\n * 命名规则：首字母，类别大写，实例小写。\r\n * acroml_require是为了addon方便访问acroml-core，外部可以不遵循nodejs自己的require的node_modules查找规则\r\n * \r\n */\r\nif (typeof global!='undefined' && typeof global.acroml_require=='undefined'){\r\n    //在nodejs下global.require是未定义，require才有定义。\r\n    //如果不先给global.acroml_require赋值，直接对acroml_require赋值，会报错说acroml_require未定义\r\n    //console.log('global:',typeof global.require, typeof require);\r\n    global.acroml_require=global.require;\r\n}\r\nif (typeof globalThis!='undefined' && typeof globalThis.acroml_require=='undefined'){\r\n    //console.log('globalThis:',typeof globalThis.require,typeof require);\r\n    globalThis.acroml_require=globalThis.require;\r\n}\r\nif (typeof window!='undefined' && typeof window.acroml_require=='undefined'){\r\n    //console.log('window:',typeof window.require,typeof require);\r\n    window.acroml_require=window.require;\r\n}\r\nif (typeof acroml_require=='undefined' && typeof require!='undefined'){\r\n    acroml_require=require;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet t=function(DDKey){return _acroML_Engine_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"].instance.getDisplayValue(DDKey);}\r\nlet AcroML={\r\n    resources: _acroML_Resources_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\r\n    utils: _acroML_Utils_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\r\n    culture: _acroML_Culture_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\r\n    DD: _acroML_DD_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\r\n    Engine: _acroML_Engine_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\r\n    t\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AcroML);\r\n\n\n//# sourceURL=webpack://AcroML/../src/index.core.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("../src/index.core.mjs");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});